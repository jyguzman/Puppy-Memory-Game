{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport { ContactSupportOutlined } from '@material-ui/icons';\nimport { faGrinStars } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const cards = props.cards;\n  let timeout = useRef(null);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [solvedCards, setSolvedCards] = useState([]);\n  const [disableBoard, setDisableBoard] = useState(false);\n\n  const enableCards = () => {\n    setDisableBoard(false);\n  };\n\n  const disableCards = () => {\n    setDisableBoard(true);\n  };\n\n  const onCardClick = index => {\n    if (flippedCards.length == 1) {\n      setFlippedCards(prev => [...prev, index]);\n      disableCards();\n    } else {\n      setFlippedCards([index]);\n    }\n\n    console.log(flippedCards);\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n\n    if (cards[firstIdx].img === cards[secondIdx].img) {\n      console.log(\"Match\");\n      setSolvedCards(prev => ({ ...prev,\n        [cards[firstIdx].img]: true\n      }));\n      setFlippedCards([]);\n    }\n\n    timeout.current = setTimeout(() => {\n      setFlippedCards([]);\n    }, 500);\n    enableCards();\n  };\n\n  const isSolved = card => {\n    return Boolean(solvedCards[card.img]);\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (flippedCards.length == 2) {\n      timeout = setTimeout(checkMatch, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          id: card.id,\n          index: index,\n          img: card.img,\n          cards: cards,\n          solved: isSolved(card),\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"wEPrOja08PAtfcSsxv3C9/q7/rQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/src/components/Board.js"],"names":["React","useEffect","useState","Container","Grid","makeStyles","MemoryCard","ContactSupportOutlined","faGrinStars","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","cards","timeout","useRef","flippedCards","setFlippedCards","solvedCards","setSolvedCards","disableBoard","setDisableBoard","enableCards","disableCards","onCardClick","index","length","prev","console","log","isFlipped","includes","checkMatch","firstIdx","secondIdx","img","current","setTimeout","isSolved","card","Boolean","clearTimeout","height","map","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport { ContactSupportOutlined } from '@material-ui/icons';\r\nimport { faGrinStars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const cards = props.cards;\r\n    let timeout = useRef(null);\r\n        \r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [solvedCards, setSolvedCards] = useState([]);\r\n    const [disableBoard, setDisableBoard] = useState(false);\r\n\r\n    const enableCards = () => {\r\n        setDisableBoard(false);\r\n    };\r\n\r\n    const disableCards = () => {\r\n        setDisableBoard(true);\r\n    };\r\n\r\n    const onCardClick = (index) => {\r\n        if (flippedCards.length == 1) {\r\n            setFlippedCards(prev => [...prev, index]);\r\n            disableCards();\r\n        } else {\r\n            setFlippedCards([index]);\r\n        }\r\n        console.log(flippedCards);\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        if (cards[firstIdx].img === cards[secondIdx].img) {\r\n            console.log(\"Match\");\r\n            setSolvedCards((prev) => ({ ...prev, [cards[firstIdx].img]: true }));\r\n            setFlippedCards([]);\r\n        }\r\n\r\n        timeout.current = setTimeout(() => {\r\n            setFlippedCards([])\r\n        }, 500);\r\n\r\n        enableCards();\r\n    };\r\n\r\n    const isSolved = (card) => {\r\n        return Boolean(solvedCards[card.img]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeout = null;\r\n        if (flippedCards.length == 2) {\r\n            timeout = setTimeout(checkMatch, 300);\r\n        }\r\n        return () => { clearTimeout(timeout); }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                id={card.id} \r\n                                index={index}\r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                solved={isSolved(card)}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}