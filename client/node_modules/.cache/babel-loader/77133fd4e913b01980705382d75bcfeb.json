{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { makeStyles, Container, Grid, Box } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport Stats from './Stats';\nimport GameEnd from './GameEnd';\nimport Options from './Options';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst swap = (array, i, j) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i >= 1; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    swap(array, j, i);\n  }\n};\n\nconst formatTime = time => {\n  const seconds = time % 60;\n  const minutes = Math.floor(time / 60);\n  let result = \"\";\n  if (minutes < 10) result += \"0\";\n  result += minutes + \":\";\n  if (seconds < 10) result += \"0\";\n  result += seconds;\n  let timeInWords = \"\";\n  if (minutes === 0) timeInWords = seconds + \" seconds\";else if (minutes === 1) timeInWords = \"1 minute, \" + seconds + \" seconds\";else timeInWords = minutes + \" minutes, \" + seconds + \" seconds\";\n  return [result, timeInWords];\n};\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    setImages(props.images);\n  }, []);\n  const [cards, setCards] = useState([]); //const images = props.images;\n\n  let timeout = useRef(null);\n  let timer = null;\n  const [time, setTime] = useState(0);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [inGame, setInGame] = useState(false);\n  const [flipCount, setFlipCount] = useState(0);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [solvedCards, setSolvedCards] = useState({});\n  const [disableBoard, setDisableBoard] = useState(false);\n  const [showGameEnd, setShowGameEnd] = useState(false);\n  /*const getCards = () => {\r\n      axios.get(\"/images\")\r\n      .then(res => {\r\n          const photos = res.data.images;\r\n          shuffle(photos);\r\n          let cards = [];\r\n          let num_cards = 0;\r\n          if(difficulty === \"easy\")\r\n              num_cards = 6;\r\n          else if (difficulty === \"medium\")\r\n              num_cards = 8;\r\n          else num_cards = 12;\r\n          for(let i = 0; i < num_cards; i++) {\r\n              const card = {\r\n                  img: photos[i].src.original,\r\n                  photographer: photos[i].photographer,\r\n              };\r\n                const match = {\r\n                  img: photos[i].src.original,\r\n                  photographer: photos[i].photographer,\r\n              };\r\n                cards.push(card);\r\n              cards.push(match);\r\n          }\r\n          shuffle(cards);\r\n          setCards(cards);\r\n      }).catch(err => console.log(err));\r\n  }*/\n\n  const getCards = () => {\n    shuffle(images);\n    let cards = [];\n    let num_cards = 0;\n    if (difficulty === \"easy\") num_cards = 6;else if (difficulty === \"medium\") num_cards = 8;else num_cards = 12;\n\n    for (let i = 0; i < num_cards; i++) {\n      const card = {\n        img: images[i].src.original,\n        photographer: images[i].photographer\n      };\n      const match = {\n        img: images[i].src.original,\n        photographer: images[i].photographer\n      };\n      cards.push(card);\n      cards.push(match);\n    }\n\n    shuffle(cards);\n    setCards(cards);\n  };\n\n  useEffect(() => {\n    getCards();\n  }, [difficulty]);\n  useEffect(() => {\n    if (inGame && !showGameEnd) timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 1000);\n  });\n\n  const disableOptions = () => {\n    setInGame(true);\n  };\n\n  const enableCards = () => {\n    setDisableBoard(false);\n  };\n\n  const disableCards = () => {\n    setDisableBoard(true);\n  };\n\n  const onCardClick = index => {\n    setInGame(true);\n\n    if (flippedCards.length === 1) {\n      setFlippedCards(prev => [...prev, index]);\n      disableCards();\n    } else {\n      clearTimeout(timeout.current);\n      setFlippedCards([index]);\n    }\n\n    setFlipCount(flipCount + 1);\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n    enableCards();\n\n    if (cards[firstIdx].img === cards[secondIdx].img) {\n      setSolvedCards(prev => ({ ...prev,\n        [cards[firstIdx].img]: true\n      }));\n      setFlippedCards([]);\n      return;\n    }\n\n    timeout.current = setTimeout(() => {\n      setFlippedCards([]);\n    }, 500);\n  };\n\n  const isSolved = card => {\n    return Boolean(solvedCards[card.img]);\n  };\n\n  const checkGameEnd = () => {\n    let numToCheck = 6;\n    if (difficulty === \"medium\") numToCheck = 8;\n    if (difficulty === \"hard\") numToCheck = 12;\n\n    if (Object.keys(solvedCards).length === numToCheck) {\n      timer = null;\n      setShowGameEnd(true);\n      setInGame(false);\n      return true;\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    checkGameEnd();\n  }, [solvedCards]);\n\n  const restartGame = () => {\n    getCards();\n    setSolvedCards([]);\n    setFlippedCards([]);\n    setFlipCount(0);\n    setTime(0);\n    shuffle(cards);\n    enableCards();\n    setShowGameEnd(false);\n  };\n\n  const changeDifficulty = event => {\n    setDifficulty(event.target.value);\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (flippedCards.length === 2) {\n      checkMatch();\n      timeout = setTimeout(checkMatch, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: [/*#__PURE__*/_jsxDEV(Stats, {\n      time: formatTime(time)[0],\n      flipCount: flipCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: disableBoard ? \"hidden\" : \"initial\",\n      children: /*#__PURE__*/_jsxDEV(Options, {\n        inGame: inGame,\n        difficulty: difficulty,\n        changeDifficulty: changeDifficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          index: index,\n          img: card.img,\n          cards: cards,\n          isDisabled: disableBoard,\n          solved: isSolved(card),\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameEnd, {\n      difficulty: difficulty,\n      open: showGameEnd,\n      flipCount: flipCount,\n      time: formatTime(time)[1],\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"aV9aAg5pRgI0QdMXsR1GNeFkwE8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/client/src/components/Board.js"],"names":["React","useEffect","useState","useRef","makeStyles","Container","Grid","Box","MemoryCard","Stats","GameEnd","Options","axios","swap","array","i","j","temp","shuffle","length","Math","floor","random","formatTime","time","seconds","minutes","result","timeInWords","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","images","setImages","cards","setCards","timeout","timer","setTime","difficulty","setDifficulty","inGame","setInGame","flipCount","setFlipCount","flippedCards","setFlippedCards","solvedCards","setSolvedCards","disableBoard","setDisableBoard","showGameEnd","setShowGameEnd","getCards","num_cards","card","img","src","original","photographer","match","push","setTimeout","disableOptions","enableCards","disableCards","onCardClick","index","prev","clearTimeout","current","isFlipped","includes","checkMatch","firstIdx","secondIdx","isSolved","Boolean","checkGameEnd","numToCheck","Object","keys","restartGame","changeDifficulty","event","target","value","height","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { makeStyles, Container, Grid, Box } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport Stats from './Stats';\r\nimport GameEnd from './GameEnd';\r\nimport Options from './Options';\r\nimport axios from 'axios';\r\n\r\n const swap = (array, i, j) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  \r\n  const shuffle = array => {\r\n    for(let i = array.length - 1; i >= 1; i--) {\r\n        const j = Math.floor(Math.random() * (i+1));\r\n        swap(array, j, i)\r\n    }\r\n  };\r\n\r\n    const formatTime = (time) => {\r\n        const seconds = time%60;\r\n        const minutes = Math.floor(time/60);\r\n\r\n        let result = \"\";\r\n        \r\n        if (minutes < 10)\r\n            result += \"0\";\r\n        result += minutes + \":\";\r\n\r\n        if (seconds < 10)\r\n            result += \"0\";\r\n        result += seconds;\r\n\r\n        let timeInWords = \"\";\r\n\r\n        if (minutes === 0)\r\n            timeInWords = seconds + \" seconds\";\r\n        else if (minutes === 1)\r\n            timeInWords = \"1 minute, \" + seconds + \" seconds\";\r\n        else timeInWords = minutes + \" minutes, \" + seconds + \" seconds\";\r\n\r\n        return [result, timeInWords];\r\n    \r\n  }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const [images, setImages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setImages(props.images);\r\n    }, []);\r\n\r\n    const [cards, setCards] = useState([]);\r\n    //const images = props.images;\r\n    let timeout = useRef(null);\r\n    let timer = null;\r\n\r\n    const [time, setTime] = useState(0);\r\n    const [difficulty, setDifficulty] = useState(\"easy\");\r\n    const [inGame, setInGame] = useState(false);\r\n    const [flipCount, setFlipCount] = useState(0);\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [solvedCards, setSolvedCards] = useState({});\r\n    const [disableBoard, setDisableBoard] = useState(false);\r\n    const [showGameEnd, setShowGameEnd] = useState(false);\r\n\r\n    /*const getCards = () => {\r\n        axios.get(\"/images\")\r\n        .then(res => {\r\n            const photos = res.data.images;\r\n            shuffle(photos);\r\n            let cards = [];\r\n            let num_cards = 0;\r\n            if(difficulty === \"easy\")\r\n                num_cards = 6;\r\n            else if (difficulty === \"medium\")\r\n                num_cards = 8;\r\n            else num_cards = 12;\r\n            for(let i = 0; i < num_cards; i++) {\r\n                const card = {\r\n                    img: photos[i].src.original,\r\n                    photographer: photos[i].photographer,\r\n                };\r\n\r\n                const match = {\r\n                    img: photos[i].src.original,\r\n                    photographer: photos[i].photographer,\r\n                };\r\n\r\n                cards.push(card);\r\n                cards.push(match);\r\n            }\r\n            shuffle(cards);\r\n            setCards(cards);\r\n        }).catch(err => console.log(err));\r\n    }*/\r\n\r\n    const getCards = () => {\r\n            shuffle(images);\r\n            let cards = [];\r\n            let num_cards = 0;\r\n            if(difficulty === \"easy\")\r\n                num_cards = 6;\r\n            else if (difficulty === \"medium\")\r\n                num_cards = 8;\r\n            else num_cards = 12;\r\n            for(let i = 0; i < num_cards; i++) {\r\n                const card = {\r\n                    img: images[i].src.original,\r\n                    photographer: images[i].photographer,\r\n                };\r\n\r\n                const match = {\r\n                    img: images[i].src.original,\r\n                    photographer: images[i].photographer,\r\n                };\r\n\r\n                cards.push(card);\r\n                cards.push(match);\r\n            }\r\n            shuffle(cards);\r\n            setCards(cards);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCards();\r\n    }, [difficulty]);\r\n\r\n    useEffect(() => {\r\n        if (inGame && !showGameEnd)\r\n            timer = setTimeout(() => {\r\n                setTime(time + 1);\r\n            }, 1000);\r\n    });\r\n\r\n    const disableOptions = () => {\r\n        setInGame(true);\r\n    }\r\n\r\n    const enableCards = () => {\r\n        setDisableBoard(false);\r\n    };\r\n\r\n    const disableCards = () => {\r\n        setDisableBoard(true);\r\n    };\r\n    const onCardClick = (index) => {\r\n        setInGame(true);\r\n        if (flippedCards.length === 1) {\r\n            setFlippedCards(prev => [...prev, index]);\r\n            disableCards();\r\n        } else {\r\n            clearTimeout(timeout.current);\r\n            setFlippedCards([index]);\r\n        }\r\n        setFlipCount(flipCount + 1);\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        enableCards();\r\n        if (cards[firstIdx].img === cards[secondIdx].img) {\r\n            setSolvedCards((prev) => ({ ...prev, [cards[firstIdx].img]: true }));\r\n            setFlippedCards([]);\r\n            return;\r\n        }\r\n\r\n        timeout.current = setTimeout(() => {\r\n            setFlippedCards([])\r\n        }, 500);\r\n    };\r\n\r\n    const isSolved = (card) => {\r\n        return Boolean(solvedCards[card.img]);\r\n    }\r\n\r\n    const checkGameEnd = () => {\r\n        let numToCheck = 6;\r\n        if (difficulty === \"medium\")\r\n            numToCheck = 8;\r\n        if (difficulty === \"hard\")\r\n            numToCheck = 12;\r\n        if (Object.keys(solvedCards).length === numToCheck) {\r\n            timer = null;\r\n            setShowGameEnd(true);\r\n            setInGame(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkGameEnd();\r\n    }, [solvedCards]);\r\n\r\n    const restartGame = () => {\r\n        getCards();\r\n        setSolvedCards([]);\r\n        setFlippedCards([]);\r\n        setFlipCount(0);\r\n        setTime(0);\r\n        shuffle(cards);\r\n        enableCards();\r\n        setShowGameEnd(false);\r\n    };\r\n\r\n    const changeDifficulty = (event) => {\r\n        setDifficulty(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeout = null;\r\n        if (flippedCards.length === 2) {\r\n            checkMatch();\r\n            timeout = setTimeout(checkMatch, 300);\r\n        }\r\n        return () => { clearTimeout(timeout); }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Stats time={formatTime(time)[0]} flipCount={flipCount}/>\r\n            <Box display={disableBoard ? \"hidden\" : \"initial\"}>\r\n                <Options inGame={inGame} difficulty={difficulty} changeDifficulty={changeDifficulty}/>\r\n            </Box>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                index={index}\r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                isDisabled={disableBoard}\r\n                                solved={isSolved(card)}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n            <GameEnd difficulty={difficulty} open={showGameEnd} flipCount={flipCount} time={formatTime(time)[1]} restartGame={restartGame}/>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}