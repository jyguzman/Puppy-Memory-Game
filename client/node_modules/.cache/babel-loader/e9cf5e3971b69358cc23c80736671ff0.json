{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst swap = (array, i, j) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i >= 1; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    swap(array[i], array[j]);\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const cards = shuffle(props.cards);\n  let timeout = useRef(null);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [solvedCards, setSolvedCards] = useState([]);\n  const [disableBoard, setDisableBoard] = useState(false);\n\n  const enableCards = () => {\n    setDisableBoard(false);\n  };\n\n  const disableCards = () => {\n    setDisableBoard(true);\n  };\n\n  const onCardClick = index => {\n    if (flippedCards.length == 1) {\n      setFlippedCards(prev => [...prev, index]);\n      disableCards();\n    } else {\n      clearTimeout(timeout.current);\n      setFlippedCards([index]);\n    }\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n    enableCards();\n\n    if (cards[firstIdx].img === cards[secondIdx].img) {\n      setSolvedCards(prev => ({ ...prev,\n        [cards[firstIdx].img]: true\n      }));\n      setFlippedCards([]);\n      return;\n    }\n\n    timeout.current = setTimeout(() => {\n      setFlippedCards([]);\n    }, 500);\n  };\n\n  const isSolved = card => {\n    return Boolean(solvedCards[card.img]);\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (flippedCards.length == 2) {\n      console.log(\"here\");\n      checkMatch();\n      timeout = setTimeout(checkMatch, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          id: card.id,\n          index: index,\n          img: card.img,\n          cards: cards,\n          isDisabled: disableBoard,\n          solved: isSolved(card),\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"wEPrOja08PAtfcSsxv3C9/q7/rQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/src/components/Board.js"],"names":["React","useEffect","useState","useRef","Container","Grid","makeStyles","MemoryCard","swap","array","i","j","temp","shuffle","length","Math","floor","random","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","cards","timeout","flippedCards","setFlippedCards","solvedCards","setSolvedCards","disableBoard","setDisableBoard","enableCards","disableCards","onCardClick","index","prev","clearTimeout","current","isFlipped","includes","checkMatch","firstIdx","secondIdx","img","setTimeout","isSolved","card","Boolean","console","log","height","map","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\n\r\nconst swap = (array, i, j) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nconst shuffle = array => {\r\n    for(let i = array.length - 1; i >= 1; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        swap(array[i], array[j])\r\n    }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const cards = shuffle(props.cards);\r\n    let timeout = useRef(null);\r\n        \r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [solvedCards, setSolvedCards] = useState([]);\r\n    const [disableBoard, setDisableBoard] = useState(false);\r\n\r\n    const enableCards = () => {\r\n        setDisableBoard(false);\r\n    };\r\n\r\n    const disableCards = () => {\r\n        setDisableBoard(true);\r\n    };\r\n\r\n    const onCardClick = (index) => {\r\n        if (flippedCards.length == 1) {\r\n            setFlippedCards(prev => [...prev, index]);\r\n            disableCards();\r\n        } else {\r\n            clearTimeout(timeout.current);\r\n            setFlippedCards([index]);\r\n        }\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        enableCards();\r\n        if (cards[firstIdx].img === cards[secondIdx].img) {\r\n            setSolvedCards((prev) => ({ ...prev, [cards[firstIdx].img]: true }));\r\n            setFlippedCards([]);\r\n            return;\r\n        }\r\n\r\n        timeout.current = setTimeout(() => {\r\n            setFlippedCards([])\r\n        }, 500);\r\n\r\n        \r\n    };\r\n\r\n    const isSolved = (card) => {\r\n        return Boolean(solvedCards[card.img]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeout = null;\r\n        if (flippedCards.length == 2) {\r\n            console.log(\"here\");\r\n            checkMatch();\r\n            timeout = setTimeout(checkMatch, 300);\r\n        }\r\n        return () => { clearTimeout(timeout); }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                id={card.id} \r\n                                index={index}\r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                isDisabled={disableBoard}\r\n                                solved={isSolved(card)}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}