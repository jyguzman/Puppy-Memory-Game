{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport { ContactSupportOutlined } from '@material-ui/icons';\nimport { faGrinStars } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const cards = props.cards;\n  const [flippedCards, setFlippedCards] = useState([]);\n\n  const onCardClick = index => {\n    if (flippedCards.length == 1) {\n      setFlippedCards(prev => [...prev, index]);\n      ;\n    } else {\n      setFlippedCards([index]);\n    }\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const isInactive = index => {\n    return null;\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n\n    if (cards[firstIdx] === cards[secondIdx]) {\n      console.log(\"Match\");\n    }\n\n    setFlippedCards([]);\n  };\n\n  useEffect(() => {\n    if (flippedCards.length == 2) {\n      checkMatch();\n    }\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          id: card.id,\n          img: card.img,\n          cards: cards,\n          solved: card.solved,\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"/uKMgSgdHioloQ0wSQSCQCyX9BA=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/src/components/Board.js"],"names":["React","useEffect","useState","Container","Grid","makeStyles","MemoryCard","ContactSupportOutlined","faGrinStars","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","cards","flippedCards","setFlippedCards","onCardClick","index","length","prev","isFlipped","includes","isInactive","checkMatch","firstIdx","secondIdx","console","log","height","map","card","id","img","solved"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport { ContactSupportOutlined } from '@material-ui/icons';\r\nimport { faGrinStars } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const cards = props.cards;\r\n        \r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n\r\n    const onCardClick = (index) => {\r\n        if (flippedCards.length == 1) {\r\n            setFlippedCards(prev => [...prev, index]);;\r\n        } else {\r\n            setFlippedCards([index]);\r\n        }\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const isInactive = (index) => {\r\n        return null;\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        if (cards[firstIdx] === cards[secondIdx]) {\r\n            console.log(\"Match\");\r\n        }\r\n        setFlippedCards([]); \r\n    };\r\n\r\n    useEffect(() => {\r\n        if (flippedCards.length == 2) {\r\n            checkMatch();\r\n        }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                id={card.id} \r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                solved={card.solved}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}