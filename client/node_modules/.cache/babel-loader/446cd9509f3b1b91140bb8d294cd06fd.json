{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { makeStyles, Container, Grid } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport Stats from './Stats';\nimport GameEnd from './GameEnd';\nimport Options from './Options';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst swap = (array, i, j) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i >= 1; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    swap(array, j, i);\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const [cards, setCards] = useState([]);\n  let timeout = useRef(null);\n  const [difficulty, setDifficulty] = useState(\"easy\");\n  const [inGame, setInGame] = useState(false);\n  const [flipCount, setFlipCount] = useState(0);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [solvedCards, setSolvedCards] = useState({});\n  const [disableBoard, setDisableBoard] = useState(false);\n  const [showGameEnd, setShowGameEnd] = useState(false);\n\n  const getCards = () => {\n    axios.get(\"/images\").then(res => {\n      const photos = res.data.images;\n      shuffle(photos);\n      let cards = [];\n      let num_cards = 0;\n      if (difficulty === \"easy\") num_cards = 8;else if (difficulty === \"medium\") num_cards = 12;else num_cards = 16;\n\n      for (let i = 0; i < num_cards; i++) {\n        const card = {\n          img: photos[i].src.original,\n          photographer: photos[i].photographer\n        };\n        const match = {\n          img: photos[i].src.original,\n          photographer: photos[i].photographer\n        };\n        cards.push(card);\n        cards.push(match);\n      }\n\n      shuffle(cards);\n      setCards(cards);\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getCards();\n  }, [difficulty]);\n\n  const enableCards = () => {\n    setDisableBoard(false);\n  };\n\n  const disableCards = () => {\n    setDisableBoard(true);\n  };\n\n  const onCardClick = index => {\n    setInGame(true);\n\n    if (flippedCards.length === 1) {\n      setFlippedCards(prev => [...prev, index]);\n      disableCards();\n    } else {\n      clearTimeout(timeout.current);\n      setFlippedCards([index]);\n    }\n\n    setFlipCount(flipCount + 1);\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n    enableCards();\n\n    if (cards[firstIdx].img === cards[secondIdx].img) {\n      setSolvedCards(prev => ({ ...prev,\n        [cards[firstIdx].img]: true\n      }));\n      setFlippedCards([]);\n      return;\n    }\n\n    timeout.current = setTimeout(() => {\n      setFlippedCards([]);\n    }, 500);\n  };\n\n  const isSolved = card => {\n    return Boolean(solvedCards[card.img]);\n  };\n\n  const checkGameEnd = () => {\n    if (Object.keys(solvedCards).length === 8) {\n      setShowGameEnd(true);\n      return true;\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    checkGameEnd();\n  }, [solvedCards]);\n\n  const restartGame = () => {\n    getCards();\n    setSolvedCards([]);\n    setFlippedCards([]);\n    setFlipCount(0);\n    shuffle(cards);\n    enableCards();\n    setShowGameEnd(false);\n    setInGame(false);\n  };\n\n  const changeDifficulty = event => {\n    setDifficulty(event.target.value);\n    console.log(event.target.value);\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (flippedCards.length === 2) {\n      checkMatch();\n      timeout = setTimeout(checkMatch, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: [/*#__PURE__*/_jsxDEV(Stats, {\n      flipCount: flipCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Options, {\n      disabled: inGame,\n      difficulty: difficulty,\n      changeDifficulty: changeDifficulty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          index: index,\n          img: card.img,\n          cards: cards,\n          isDisabled: disableBoard,\n          solved: isSolved(card),\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameEnd, {\n      open: showGameEnd,\n      flipCount: flipCount,\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"oRpcd4BIQGWq49iGuyrz6Rbxi2g=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/client/src/components/Board.js"],"names":["React","useEffect","useState","useRef","makeStyles","Container","Grid","MemoryCard","Stats","GameEnd","Options","axios","swap","array","i","j","temp","shuffle","length","Math","floor","random","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","cards","setCards","timeout","difficulty","setDifficulty","inGame","setInGame","flipCount","setFlipCount","flippedCards","setFlippedCards","solvedCards","setSolvedCards","disableBoard","setDisableBoard","showGameEnd","setShowGameEnd","getCards","get","then","res","photos","data","images","num_cards","card","img","src","original","photographer","match","push","catch","err","console","log","enableCards","disableCards","onCardClick","index","prev","clearTimeout","current","isFlipped","includes","checkMatch","firstIdx","secondIdx","setTimeout","isSolved","Boolean","checkGameEnd","Object","keys","restartGame","changeDifficulty","event","target","value","height","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,QAA4C,mBAA5C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX,KAAiB;AAC1B,QAAMC,IAAI,GAAGH,KAAK,CAACC,CAAD,CAAlB;AACAD,EAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,EAAAA,KAAK,CAACE,CAAD,CAAL,GAAWC,IAAX;AACD,CAJH;;AAME,MAAMC,OAAO,GAAGJ,KAAK,IAAI;AACvB,OAAI,IAAIC,CAAC,GAAGD,KAAK,CAACK,MAAN,GAAe,CAA3B,EAA8BJ,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,UAAMC,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,CAAC,GAAC,CAAnB,CAAX,CAAV;AACAF,IAAAA,IAAI,CAACC,KAAD,EAAQE,CAAR,EAAWD,CAAX,CAAJ;AACH;AACF,CALD;;AAOF,MAAMQ,SAAS,GAAGlB,UAAU,CAAEmB,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,MADP;AAEFC,IAAAA,cAAc,EAAE,QAFd;AAGFC,IAAAA,MAAM,EAAE,QAHN;AAIFC,IAAAA,QAAQ,EAAE,MAJR;AAKFC,IAAAA,UAAU,EAAE;AALV;AAD+B,CAAZ,CAAD,CAA5B;;AAWA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACrB,QAAMC,OAAO,GAAGV,SAAS,EAAzB;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAIiC,OAAO,GAAGhC,MAAM,CAAC,IAAD,CAApB;AAEA,QAAM,CAACiC,UAAD,EAAaC,aAAb,IAA8BnC,QAAQ,CAAC,MAAD,CAA5C;AACA,QAAM,CAACoC,MAAD,EAASC,SAAT,IAAsBrC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACsC,SAAD,EAAYC,YAAZ,IAA4BvC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACwC,YAAD,EAAeC,eAAf,IAAkCzC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC0C,WAAD,EAAcC,cAAd,IAAgC3C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC4C,YAAD,EAAeC,eAAf,IAAkC7C,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC8C,WAAD,EAAcC,cAAd,IAAgC/C,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMgD,QAAQ,GAAG,MAAM;AACnBvC,IAAAA,KAAK,CAACwC,GAAN,CAAU,SAAV,EACCC,IADD,CACMC,GAAG,IAAI;AACT,YAAMC,MAAM,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAxB;AACAvC,MAAAA,OAAO,CAACqC,MAAD,CAAP;AACA,UAAIrB,KAAK,GAAG,EAAZ;AACA,UAAIwB,SAAS,GAAG,CAAhB;AACA,UAAGrB,UAAU,KAAK,MAAlB,EACIqB,SAAS,GAAG,CAAZ,CADJ,KAEK,IAAIrB,UAAU,KAAK,QAAnB,EACDqB,SAAS,GAAG,EAAZ,CADC,KAEAA,SAAS,GAAG,EAAZ;;AACL,WAAI,IAAI3C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG2C,SAAnB,EAA8B3C,CAAC,EAA/B,EAAmC;AAC/B,cAAM4C,IAAI,GAAG;AACTC,UAAAA,GAAG,EAAEL,MAAM,CAACxC,CAAD,CAAN,CAAU8C,GAAV,CAAcC,QADV;AAETC,UAAAA,YAAY,EAAER,MAAM,CAACxC,CAAD,CAAN,CAAUgD;AAFf,SAAb;AAKA,cAAMC,KAAK,GAAG;AACVJ,UAAAA,GAAG,EAAEL,MAAM,CAACxC,CAAD,CAAN,CAAU8C,GAAV,CAAcC,QADT;AAEVC,UAAAA,YAAY,EAAER,MAAM,CAACxC,CAAD,CAAN,CAAUgD;AAFd,SAAd;AAKA7B,QAAAA,KAAK,CAAC+B,IAAN,CAAWN,IAAX;AACAzB,QAAAA,KAAK,CAAC+B,IAAN,CAAWD,KAAX;AACH;;AACD9C,MAAAA,OAAO,CAACgB,KAAD,CAAP;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KA3BD,EA2BGgC,KA3BH,CA2BSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CA3BhB;AA4BH,GA7BD;;AA+BAjE,EAAAA,SAAS,CAAC,MAAM;AACZiD,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACd,UAAD,CAFM,CAAT;;AAIA,QAAMiC,WAAW,GAAG,MAAM;AACtBtB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAFD;;AAIA,QAAMuB,YAAY,GAAG,MAAM;AACvBvB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAFD;;AAGA,QAAMwB,WAAW,GAAIC,KAAD,IAAW;AAC3BjC,IAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,QAAIG,YAAY,CAACxB,MAAb,KAAwB,CAA5B,EAA+B;AAC3ByB,MAAAA,eAAe,CAAC8B,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUD,KAAV,CAAT,CAAf;AACAF,MAAAA,YAAY;AACf,KAHD,MAGO;AACHI,MAAAA,YAAY,CAACvC,OAAO,CAACwC,OAAT,CAAZ;AACAhC,MAAAA,eAAe,CAAC,CAAC6B,KAAD,CAAD,CAAf;AACH;;AACD/B,IAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACH,GAVD;;AAYA,QAAMoC,SAAS,GAAIJ,KAAD,IAAW;AACzB,WAAO9B,YAAY,CAACmC,QAAb,CAAsBL,KAAtB,CAAP;AACH,GAFD;;AAIA,QAAMM,UAAU,GAAG,MAAM;AACrB,UAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBtC,YAA9B;AACA2B,IAAAA,WAAW;;AACX,QAAIpC,KAAK,CAAC8C,QAAD,CAAL,CAAgBpB,GAAhB,KAAwB1B,KAAK,CAAC+C,SAAD,CAAL,CAAiBrB,GAA7C,EAAkD;AAC9Cd,MAAAA,cAAc,CAAE4B,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAW,SAACxC,KAAK,CAAC8C,QAAD,CAAL,CAAgBpB,GAAjB,GAAuB;AAAlC,OAAX,CAAD,CAAd;AACAhB,MAAAA,eAAe,CAAC,EAAD,CAAf;AACA;AACH;;AAEDR,IAAAA,OAAO,CAACwC,OAAR,GAAkBM,UAAU,CAAC,MAAM;AAC/BtC,MAAAA,eAAe,CAAC,EAAD,CAAf;AACH,KAF2B,EAEzB,GAFyB,CAA5B;AAGH,GAZD;;AAcA,QAAMuC,QAAQ,GAAIxB,IAAD,IAAU;AACvB,WAAOyB,OAAO,CAACvC,WAAW,CAACc,IAAI,CAACC,GAAN,CAAZ,CAAd;AACH,GAFD;;AAIA,QAAMyB,YAAY,GAAG,MAAM;AACvB,QAAIC,MAAM,CAACC,IAAP,CAAY1C,WAAZ,EAAyB1B,MAAzB,KAAoC,CAAxC,EAA2C;AACvC+B,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQAhD,EAAAA,SAAS,CAAC,MAAM;AACZmF,IAAAA,YAAY;AACf,GAFQ,EAEN,CAACxC,WAAD,CAFM,CAAT;;AAIA,QAAM2C,WAAW,GAAG,MAAM;AACtBrC,IAAAA,QAAQ;AACRL,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAxB,IAAAA,OAAO,CAACgB,KAAD,CAAP;AACAoC,IAAAA,WAAW;AACXpB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAV,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GATD;;AAWA,QAAMiD,gBAAgB,GAAIC,KAAD,IAAW;AAChCpD,IAAAA,aAAa,CAACoD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,KAAK,CAACC,MAAN,CAAaC,KAAzB;AACH,GAHD;;AAKA1F,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkC,OAAO,GAAG,IAAd;;AACA,QAAIO,YAAY,CAACxB,MAAb,KAAwB,CAA5B,EAA+B;AAC3B4D,MAAAA,UAAU;AACV3C,MAAAA,OAAO,GAAG8C,UAAU,CAACH,UAAD,EAAa,GAAb,CAApB;AACH;;AACD,WAAO,MAAM;AAAEJ,MAAAA,YAAY,CAACvC,OAAD,CAAZ;AAAwB,KAAvC;AACH,GAPQ,EAON,CAACO,YAAD,CAPM,CAAT;AASA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAEV,OAAO,CAACR,IAA9B;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEgB;AAAlB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEF,MAAnB;AAA2B,MAAA,UAAU,EAAEF,UAAvC;AAAmD,MAAA,gBAAgB,EAAEoD;AAArE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,SAAS,MAApB;AAAqB,MAAA,OAAO,EAAE,CAA9B;AAAiC,MAAA,KAAK,EAAE;AAACI,QAAAA,MAAM,EAAE7D,KAAK,CAAC6D,MAAN,GAAa,CAAb,GAAe;AAAxB,OAAxC;AAAA,gBAEQ3D,KAAK,CAAC4D,GAAN,CAAU,CAACnC,IAAD,EAAOc,KAAP,KAAiB;AACvB,4BACI,QAAC,UAAD;AACI,UAAA,OAAO,EAAED,WADb;AAEI,UAAA,KAAK,EAAEC,KAFX;AAII,UAAA,GAAG,EAAEd,IAAI,CAACC,GAJd;AAKI,UAAA,KAAK,EAAE1B,KALX;AAMI,UAAA,UAAU,EAAEa,YANhB;AAOI,UAAA,MAAM,EAAEoC,QAAQ,CAACxB,IAAD,CAPpB;AAQI,UAAA,SAAS,EAAEkB,SAAS,CAACJ,KAAD;AARxB,WAGSA,KAHT;AAAA;AAAA;AAAA;AAAA,gBADJ;AAWH,OAZD;AAFR;AAAA;AAAA;AAAA;AAAA,YAHJ,eAoBI,QAAC,OAAD;AAAS,MAAA,IAAI,EAAExB,WAAf;AAA4B,MAAA,SAAS,EAAER,SAAvC;AAAkD,MAAA,WAAW,EAAE+C;AAA/D;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAvJD;;GAAMzD,K;UACcR,S;;;KADdQ,K;AAyJN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { makeStyles, Container, Grid } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport Stats from './Stats';\r\nimport GameEnd from './GameEnd';\r\nimport Options from './Options';\r\nimport axios from 'axios';\r\n\r\nconst swap = (array, i, j) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  \r\n  const shuffle = array => {\r\n    for(let i = array.length - 1; i >= 1; i--) {\r\n        const j = Math.floor(Math.random() * (i+1));\r\n        swap(array, j, i)\r\n    }\r\n  };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const [cards, setCards] = useState([]);\r\n    let timeout = useRef(null);\r\n\r\n    const [difficulty, setDifficulty] = useState(\"easy\");\r\n    const [inGame, setInGame] = useState(false);\r\n    const [flipCount, setFlipCount] = useState(0);\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [solvedCards, setSolvedCards] = useState({});\r\n    const [disableBoard, setDisableBoard] = useState(false);\r\n    const [showGameEnd, setShowGameEnd] = useState(false);\r\n\r\n    const getCards = () => {\r\n        axios.get(\"/images\")\r\n        .then(res => {\r\n            const photos = res.data.images;\r\n            shuffle(photos);\r\n            let cards = [];\r\n            let num_cards = 0;\r\n            if(difficulty === \"easy\")\r\n                num_cards = 8;\r\n            else if (difficulty === \"medium\")\r\n                num_cards = 12;\r\n            else num_cards = 16;\r\n            for(let i = 0; i < num_cards; i++) {\r\n                const card = {\r\n                    img: photos[i].src.original,\r\n                    photographer: photos[i].photographer,\r\n                };\r\n\r\n                const match = {\r\n                    img: photos[i].src.original,\r\n                    photographer: photos[i].photographer,\r\n                };\r\n\r\n                cards.push(card);\r\n                cards.push(match);\r\n            }\r\n            shuffle(cards);\r\n            setCards(cards);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCards();\r\n    }, [difficulty]);\r\n\r\n    const enableCards = () => {\r\n        setDisableBoard(false);\r\n    };\r\n\r\n    const disableCards = () => {\r\n        setDisableBoard(true);\r\n    };\r\n    const onCardClick = (index) => {\r\n        setInGame(true);\r\n        if (flippedCards.length === 1) {\r\n            setFlippedCards(prev => [...prev, index]);\r\n            disableCards();\r\n        } else {\r\n            clearTimeout(timeout.current);\r\n            setFlippedCards([index]);\r\n        }\r\n        setFlipCount(flipCount + 1);\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        enableCards();\r\n        if (cards[firstIdx].img === cards[secondIdx].img) {\r\n            setSolvedCards((prev) => ({ ...prev, [cards[firstIdx].img]: true }));\r\n            setFlippedCards([]);\r\n            return;\r\n        }\r\n\r\n        timeout.current = setTimeout(() => {\r\n            setFlippedCards([])\r\n        }, 500);\r\n    };\r\n\r\n    const isSolved = (card) => {\r\n        return Boolean(solvedCards[card.img]);\r\n    }\r\n\r\n    const checkGameEnd = () => {\r\n        if (Object.keys(solvedCards).length === 8) {\r\n            setShowGameEnd(true);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkGameEnd();\r\n    }, [solvedCards]);\r\n\r\n    const restartGame = () => {\r\n        getCards();\r\n        setSolvedCards([]);\r\n        setFlippedCards([]);\r\n        setFlipCount(0);\r\n        shuffle(cards);\r\n        enableCards();\r\n        setShowGameEnd(false);\r\n        setInGame(false);\r\n    };\r\n\r\n    const changeDifficulty = (event) => {\r\n        setDifficulty(event.target.value);\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timeout = null;\r\n        if (flippedCards.length === 2) {\r\n            checkMatch();\r\n            timeout = setTimeout(checkMatch, 300);\r\n        }\r\n        return () => { clearTimeout(timeout); }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Stats flipCount={flipCount}/>\r\n            <Options disabled={inGame} difficulty={difficulty} changeDifficulty={changeDifficulty}/>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                index={index}\r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                isDisabled={disableBoard}\r\n                                solved={isSolved(card)}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n            <GameEnd open={showGameEnd} flipCount={flipCount} restartGame={restartGame}/>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}