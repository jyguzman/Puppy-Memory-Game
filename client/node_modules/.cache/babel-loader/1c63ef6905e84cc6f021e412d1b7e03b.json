{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\client\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport Stats from './Stats';\nimport GameEnd from './GameEnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst swap = (array, i, j) => {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i >= 1; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    swap(array, j, i);\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const [cards, setCards] = useState([]);\n  let timeout = useRef(null);\n  const [images, setImages] = useState([]);\n  const [flipCount, setFlipCount] = useState(0);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [solvedCards, setSolvedCards] = useState({});\n  const [disableBoard, setDisableBoard] = useState(false);\n  const [showGameEnd, setShowGameEnd] = useState(false);\n\n  const getImages = () => {\n    axios.get(\"/images\").then(res => {\n      setImages(res.data.images);\n    }).catch(err => console.log(err));\n  };\n\n  const getCards = () => {\n    shuffle(images);\n    let cards = [];\n\n    for (let i = 0; i < 8; i++) {\n      const card = {\n        img: images[i].src.original\n      };\n      const match = {\n        img: images[i].src.original\n      };\n      cards.push(card);\n      cards.push(match);\n    }\n\n    shuffle(cards);\n    setCards(cards);\n  };\n\n  useEffect(() => {\n    getImages();\n  }, []);\n  /*const getCards = () => {\r\n      axios.get(\"/images\")\r\n      .then(res => {\r\n          const photos = res.data.images;\r\n          shuffle(photos);\r\n          let cards = [];\r\n          for(let i = 0; i < 8; i++) {\r\n              const card = {\r\n                  img: photos[i].src.original,\r\n              };\r\n                const match = {\r\n                  img: photos[i].src.original,\r\n              };\r\n                cards.push(card);\r\n              cards.push(match);\r\n          }\r\n          shuffle(cards);\r\n          setCards(cards);\r\n      }).catch(err => console.log(err));\r\n  }*/\n\n  useEffect(() => {\n    if (cards.length == 0) getCards();\n  }, []);\n\n  const enableCards = () => {\n    setDisableBoard(false);\n  };\n\n  const disableCards = () => {\n    setDisableBoard(true);\n  };\n\n  const onCardClick = index => {\n    console.log(cards.length);\n\n    if (flippedCards.length == 1) {\n      setFlippedCards(prev => [...prev, index]);\n      disableCards();\n    } else {\n      clearTimeout(timeout.current);\n      setFlippedCards([index]);\n    }\n\n    setFlipCount(flipCount + 1);\n  };\n\n  const isFlipped = index => {\n    return flippedCards.includes(index);\n  };\n\n  const checkMatch = () => {\n    const [firstIdx, secondIdx] = flippedCards;\n    enableCards();\n\n    if (cards[firstIdx].img === cards[secondIdx].img) {\n      setSolvedCards(prev => ({ ...prev,\n        [cards[firstIdx].img]: true\n      }));\n      setFlippedCards([]);\n      return;\n    }\n\n    timeout.current = setTimeout(() => {\n      setFlippedCards([]);\n    }, 500);\n  };\n\n  const isSolved = card => {\n    return Boolean(solvedCards[card.img]);\n  };\n\n  const checkGameEnd = () => {\n    if (Object.keys(solvedCards).length === 8) {\n      setShowGameEnd(true);\n      return true;\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    checkGameEnd();\n  }, [solvedCards]);\n\n  const restartGame = () => {\n    getCards();\n    setSolvedCards([]);\n    setFlippedCards([]);\n    setFlipCount(0);\n    shuffle(cards);\n    enableCards();\n    setShowGameEnd(false);\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (flippedCards.length == 2) {\n      checkMatch();\n      timeout = setTimeout(checkMatch, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [flippedCards]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: [/*#__PURE__*/_jsxDEV(Stats, {\n      flipCount: flipCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cards.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          id: card.id,\n          index: index,\n          img: card.img,\n          cards: cards,\n          isDisabled: disableBoard,\n          solved: isSolved(card),\n          isFlipped: isFlipped(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameEnd, {\n      open: showGameEnd,\n      flipCount: flipCount,\n      restartGame: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"0Ty7DCvpFqGQSEBXsJniPEi0Ya4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/client/src/components/Board.js"],"names":["React","useEffect","useState","useRef","Container","Grid","makeStyles","MemoryCard","Stats","GameEnd","axios","swap","array","i","j","temp","shuffle","length","Math","floor","random","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","cards","setCards","timeout","images","setImages","flipCount","setFlipCount","flippedCards","setFlippedCards","solvedCards","setSolvedCards","disableBoard","setDisableBoard","showGameEnd","setShowGameEnd","getImages","get","then","res","data","catch","err","console","log","getCards","card","img","src","original","match","push","enableCards","disableCards","onCardClick","index","prev","clearTimeout","current","isFlipped","includes","checkMatch","firstIdx","secondIdx","setTimeout","isSolved","Boolean","checkGameEnd","Object","keys","restartGame","height","map","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport Stats from './Stats';\r\nimport GameEnd from './GameEnd';\r\nimport axios from 'axios';\r\n\r\nconst swap = (array, i, j) => {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  \r\n  const shuffle = array => {\r\n    for(let i = array.length - 1; i >= 1; i--) {\r\n        const j = Math.floor(Math.random() * (i+1));\r\n  \r\n        swap(array, j, i)\r\n    }\r\n  };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const [cards, setCards] = useState([]);\r\n    let timeout = useRef(null);\r\n    const [images, setImages] = useState([]);\r\n    const [flipCount, setFlipCount] = useState(0);\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [solvedCards, setSolvedCards] = useState({});\r\n    const [disableBoard, setDisableBoard] = useState(false);\r\n    const [showGameEnd, setShowGameEnd] = useState(false);\r\n\r\n    const getImages = () => {\r\n        axios.get(\"/images\")\r\n        .then(res => {\r\n            setImages(res.data.images);\r\n            \r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const getCards = () => {\r\n        shuffle(images);\r\n        let cards = [];\r\n        for(let i = 0; i < 8; i++) {\r\n            const card = {\r\n                img: images[i].src.original,\r\n            };\r\n\r\n            const match = {\r\n                img: images[i].src.original,\r\n            };\r\n\r\n            cards.push(card);\r\n            cards.push(match);\r\n        }\r\n        shuffle(cards);\r\n        setCards(cards);\r\n}\r\n\r\n    useEffect(() => {\r\n        getImages();\r\n    }, []);\r\n\r\n    /*const getCards = () => {\r\n        axios.get(\"/images\")\r\n        .then(res => {\r\n            const photos = res.data.images;\r\n            shuffle(photos);\r\n            let cards = [];\r\n            for(let i = 0; i < 8; i++) {\r\n                const card = {\r\n                    img: photos[i].src.original,\r\n                };\r\n\r\n                const match = {\r\n                    img: photos[i].src.original,\r\n                };\r\n\r\n                cards.push(card);\r\n                cards.push(match);\r\n            }\r\n            shuffle(cards);\r\n            setCards(cards);\r\n        }).catch(err => console.log(err));\r\n    }*/\r\n\r\n    useEffect(() => {\r\n        if(cards.length == 0)\r\n            getCards();\r\n    }, []);\r\n\r\n    const enableCards = () => {\r\n        setDisableBoard(false);\r\n    };\r\n\r\n    const disableCards = () => {\r\n        setDisableBoard(true);\r\n    };\r\n    const onCardClick = (index) => {\r\n        console.log(cards.length);\r\n        if (flippedCards.length == 1) {\r\n            setFlippedCards(prev => [...prev, index]);\r\n            disableCards();\r\n        } else {\r\n            clearTimeout(timeout.current);\r\n            setFlippedCards([index]);\r\n        }\r\n        setFlipCount(flipCount + 1);\r\n    };\r\n\r\n    const isFlipped = (index) => {\r\n        return flippedCards.includes(index);\r\n    }\r\n\r\n    const checkMatch = () => {\r\n        const [firstIdx, secondIdx] = flippedCards;\r\n        enableCards();\r\n        if (cards[firstIdx].img === cards[secondIdx].img) {\r\n            setSolvedCards((prev) => ({ ...prev, [cards[firstIdx].img]: true }));\r\n            setFlippedCards([]);\r\n            return;\r\n        }\r\n\r\n        timeout.current = setTimeout(() => {\r\n            setFlippedCards([])\r\n        }, 500);\r\n    };\r\n\r\n    const isSolved = (card) => {\r\n        return Boolean(solvedCards[card.img]);\r\n    }\r\n\r\n    const checkGameEnd = () => {\r\n        if (Object.keys(solvedCards).length === 8) {\r\n            setShowGameEnd(true);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkGameEnd();\r\n    }, [solvedCards]);\r\n\r\n    const restartGame = () => {\r\n        getCards();\r\n        setSolvedCards([]);\r\n        setFlippedCards([]);\r\n        setFlipCount(0);\r\n        shuffle(cards);\r\n        enableCards();\r\n        setShowGameEnd(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let timeout = null;\r\n        if (flippedCards.length == 2) {\r\n            checkMatch();\r\n            timeout = setTimeout(checkMatch, 300);\r\n        }\r\n        return () => { clearTimeout(timeout); }\r\n    }, [flippedCards]);\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Stats flipCount={flipCount}/>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    cards.map((card, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                id={card.id} \r\n                                index={index}\r\n                                key={index}\r\n                                img={card.img} \r\n                                cards={cards}\r\n                                isDisabled={disableBoard}\r\n                                solved={isSolved(card)}\r\n                                isFlipped={isFlipped(index)}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n            <GameEnd open={showGameEnd} flipCount={flipCount} restartGame={restartGame} />\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}