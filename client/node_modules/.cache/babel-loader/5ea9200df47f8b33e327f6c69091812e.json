{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordi\\\\OneDrive\\\\Desktop\\\\puppymemorygame\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core';\nimport MemoryCard from './MemoryCard';\nimport { ContactSupportOutlined } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    flexWrap: \"wrap\",\n    paddingTop: \"20px\"\n  }\n}));\n\nconst Board = props => {\n  _s();\n\n  const classes = useStyles();\n  const pictures = props.pictures;\n  const [cards, setCards] = useState([]);\n  let cardUrls = [];\n\n  for (let i = 0; i < pictures.length; i++) {\n    cardUrls.push(pictures[i]);\n    cardUrls.push(pictures[i]);\n  }\n\n  const [flippedCards, setFlippedCards] = useState([]);\n\n  const getMemCards = () => {\n    let memCards = [];\n\n    for (let i = 0; i < cardUrls.length; i++) {\n      memCards[i] = {\n        id: i,\n        flipped: false,\n        solved: false\n      };\n    }\n\n    return memCards;\n  };\n\n  useEffect(() => {\n    setCards(getMemCards());\n  }, []);\n\n  const onCardClick = index => {\n    console.log(index);\n\n    if (flippedCards.length == 1) {\n      setFlippedCards(prev => [...prev, index]);\n      ;\n    } else {\n      setFlippedCards([index]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.grid,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      spacing: 2,\n      style: {\n        height: props.height / 6 * 4\n      },\n      children: cardUrls.map((pic, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          onClick: onCardClick,\n          id: index,\n          url: pic.src.original,\n          cards: cardUrls\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"dNLCuoC+hWlIAdytKy5K57a2jaE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jordi/OneDrive/Desktop/puppymemorygame/src/components/Board.js"],"names":["React","useEffect","useState","Container","Grid","makeStyles","MemoryCard","ContactSupportOutlined","useStyles","theme","grid","display","justifyContent","margin","flexWrap","paddingTop","Board","props","classes","pictures","cards","setCards","cardUrls","i","length","push","flippedCards","setFlippedCards","getMemCards","memCards","id","flipped","solved","onCardClick","index","console","log","prev","height","map","pic","src","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MemoryCard from './MemoryCard';\r\nimport { ContactSupportOutlined } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grid: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"0 auto\",\r\n        flexWrap: \"wrap\",\r\n        paddingTop: \"20px\"\r\n    },\r\n    \r\n}));\r\n\r\nconst Board = (props) => {\r\n    const classes = useStyles();\r\n    const pictures = props.pictures;\r\n    const [cards, setCards] = useState([]);\r\n    let cardUrls = [];\r\n        \r\n    for(let i = 0; i < pictures.length; i++) {\r\n        cardUrls.push(pictures[i]);\r\n        cardUrls.push(pictures[i]);\r\n    }\r\n\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n\r\n    const getMemCards = () => {\r\n        let memCards = [];\r\n        for(let i = 0; i < cardUrls.length; i++) {\r\n            memCards[i] = {\r\n                id: i,\r\n                flipped: false,\r\n                solved: false,\r\n            };\r\n        }\r\n        return memCards;\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCards(getMemCards());\r\n    }, []);\r\n\r\n    const onCardClick = index => {\r\n        console.log(index);\r\n        if (flippedCards.length == 1) {\r\n            setFlippedCards(prev => [...prev, index]);;\r\n        } else {\r\n            setFlippedCards([index]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className={classes.grid}>\r\n            <Grid item container spacing={2} style={{height: props.height/6*4}}>\r\n                {   \r\n                    \r\n                    cardUrls.map((pic, index) => {\r\n                        return (\r\n                            <MemoryCard \r\n                                onClick={onCardClick}\r\n                                id={index} \r\n                                key={index}\r\n                                url={pic.src.original} \r\n                                cards={cardUrls}/>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}